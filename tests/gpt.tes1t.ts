import { test, expect } from '@playwright/test';

test.describe('–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', () => {
  test('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏–Ω–æ–º standard_user', async ({ page }) => {
    await page.goto('https://www.saucedemo.com/');

    const usernameInput = page.locator('[data-test="username"]');
    const passwordInput = page.locator('[data-test="password"]');
    const loginButton = page.locator('[data-test="login-button"]');

    await expect(usernameInput).toBeVisible();
    await usernameInput.fill('standard_user');
    await passwordInput.fill('secret_sauce');
    await loginButton.click();

    await expect(page).toHaveURL(/inventory/);
    await expect(page.locator('[data-test="product-sort-container"]')).toBeVisible();
  });


  test('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏–Ω–æ–º problem_user ‚Äî –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ', async ({ page }) => {
    await page.goto('https://www.saucedemo.com/');

    const usernameInput = page.locator('[data-test="username"]');
    const passwordInput = page.locator('[data-test="password"]');
    const loginButton = page.locator('[data-test="login-button"]');

    await expect(usernameInput).toBeVisible();
    await usernameInput.fill('problem_user');
    await passwordInput.fill('secret_sauce');
    await loginButton.click();

    await expect(page).toHaveURL(/inventory/);
    await expect(page.locator('[data-test="inventory-list"]')).toBeVisible();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    const imageLocators = page.locator('.inventory_item_img img');
    const imageCount = await imageLocators.count();

    // –°—Ä–∞–≤–Ω–∏–º src –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const srcList: string[] = [];

    for (let i = 0; i < imageCount; i++) {
      const src = await imageLocators.nth(i).getAttribute('src');
      if (src) {
        srcList.push(src);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    const firstSrc = srcList[0];
    for (const src of srcList) {
      expect(src).toBe(firstSrc);
    }
    });


     test('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏–Ω–æ–º performance_glitch_user ‚Äî —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏', async ({ page }) => {
    await page.goto('https://www.saucedemo.com/');

    const usernameInput = page.locator('[data-test="username"]');
    const passwordInput = page.locator('[data-test="password"]');
    const loginButton = page.locator('[data-test="login-button"]');

    await expect(usernameInput).toBeVisible();
    await usernameInput.fill('performance_glitch_user');
    await passwordInput.fill('secret_sauce');

    const start = Date.now();
    await loginButton.click();
    await page.waitForURL(/inventory/);
    const duration = Date.now() - start;

    console.log(`‚è± –í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞: ${duration} –º—Å`);

    // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    await expect(page.locator('[data-test="product-sort-container"]')).toBeVisible();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ö–æ–¥ –∑–∞–Ω—è–ª –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, > 3000 –º—Å)
    expect(duration).toBeGreaterThan(3000);
  });


  test('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏–Ω–æ–º error_user ‚Äî –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ', async ({ page }) => {
    await page.goto('https://www.saucedemo.com/');

    await page.locator('[data-test="username"]').fill('error_user');
    await page.locator('[data-test="password"]').fill('secret_sauce');
    await page.locator('[data-test="login-button"]').click();

    await expect(page).toHaveURL(/inventory/);
    const sortDropdown = page.locator('[data-test="product-sort-container"]');
    await expect(sortDropdown).toBeVisible();

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ‚Äî –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
    try {
      await sortDropdown.selectOption('hilo');
    } catch (err) {
      console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É error_user:', err);
    }

    // –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ DOM
    const errorBanner = page.locator('.error-message-container');
    if (await errorBanner.isVisible()) {
      const errorText = await errorBanner.textContent();
      console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞:', errorText);
    }

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –≤—Å—ë –µ—â—ë –Ω–∞ inventory
    await expect(page).toHaveURL(/inventory/);
  });


  test('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏–Ω–æ–º visual_user ‚Äî —Å–ª–æ–º–∞–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Ü–µ–Ω—ã', async ({ page }) => {
  await page.goto('https://www.saucedemo.com/');

  await page.locator('[data-test="username"]').fill('visual_user');
  await page.locator('[data-test="password"]').fill('secret_sauce');
  await page.locator('[data-test="login-button"]').click();

  await expect(page).toHaveURL(/inventory/);
  const inventoryItems = page.locator('.inventory_item');
  const itemCount = await inventoryItems.count();
  expect(itemCount).toBeGreaterThan(0);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω
  const priceLocators = page.locator('.inventory_item_price');
  const prices: string[] = [];

  for (let i = 0; i < await priceLocators.count(); i++) {
    const priceText = await priceLocators.nth(i).innerText();
    prices.push(priceText.trim());
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç—å —Ü–µ–Ω
  console.log('üîé –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã:', prices);

  const uniquePrices = [...new Set(prices)];
  if (uniquePrices.length > 3) {
    console.warn('‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö —Ü–µ–Ω ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –±–∞–≥ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
  const firstItem = page.locator('.inventory_item').first();
  const boundingBox = await firstItem.boundingBox();
  if (!boundingBox || boundingBox.width < 100 || boundingBox.height < 100) {
    console.warn('‚ö†Ô∏è –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—Ä—É—à–µ–Ω–∞ ‚Äî —ç–ª–µ–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª –∏–ª–∏ –Ω–µ–≤–∏–¥–∏–º');
  }

  // –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  await page.screenshot({ path: `screenshots/visual_user.png`, fullPage: true });
});

});

test.describe('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π', () => {
  test('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å –ª–æ–≥–∏–Ω–æ–º locked_out_user', async ({ page }) => {
    await page.goto('https://www.saucedemo.com/');

    const usernameInput = page.locator('[data-test="username"]');
    const passwordInput = page.locator('[data-test="password"]');
    const loginButton = page.locator('[data-test="login-button"]');
    const errorBox = page.locator('[data-test="error"]');

    await expect(usernameInput).toBeVisible();
    await usernameInput.fill('locked_out_user');
    await passwordInput.fill('secret_sauce');
    await loginButton.click();

    await expect(errorBox).toBeVisible();
    await expect(errorBox).toContainText('Epic sadface: Sorry, this user has been locked out.');
  });
});
