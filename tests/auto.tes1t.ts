// –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –Ω–∞ https://www.saucedemo.com/

import { test, expect } from '@playwright/test';
import { LoginPage } from '../pages/loginPage.ts';
import { InventoryPage } from '../pages/inventoryPage.ts';

test.describe('–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', () => {
  let loginPage: LoginPage;
  let inventoryPage: InventoryPage;

  test.beforeEach(async ({ page }) => {
    loginPage = new LoginPage(page);
    inventoryPage = new InventoryPage(page);
    await loginPage.goto();
  });

  test('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏–Ω–æ–º standard_user', async ({ page }) => {
    await loginPage.login('standard_user', 'secret_sauce');
    await expect(inventoryPage.sortDropdown).toBeVisible();
  });

  test('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏–Ω–æ–º problem_user ‚Äî –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ', async ({ page }) => {
    await loginPage.login('problem_user', 'secret_sauce');
    const images = await inventoryPage.getImageSources();
    const first = images[0];
    for (const src of images) {
      expect(src).toBe(first);
    }
  });

  test('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏–Ω–æ–º performance_glitch_user ‚Äî —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏', async ({ page }) => {
    const start = Date.now();
    await loginPage.login('performance_glitch_user', 'secret_sauce');
    const duration = Date.now() - start;
    console.log(`‚è± –í—Ä–µ–º—è –≤—Ö–æ–¥–∞: ${duration} –º—Å`);
    await expect(inventoryPage.sortDropdown).toBeVisible();
    expect(duration).toBeGreaterThan(3000);
  });

  test('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏–Ω–æ–º error_user ‚Äî –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ', async ({ page }) => {
    await loginPage.login('error_user', 'secret_sauce');
    try {
      await inventoryPage.sortDropdown.selectOption('hilo');
    } catch (err) {
      console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ:', err);
    }
    const error = inventoryPage.errorBanner;
    if (await error.isVisible()) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', await error.textContent());
    }
  });

  test('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏–Ω–æ–º visual_user ‚Äî —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Å–ª–æ–º–∞–Ω–Ω—ã–π UI', async ({ page }) => {
    await loginPage.login('visual_user', 'secret_sauce');
    const prices = await inventoryPage.getItemPrices();
    const unique = [...new Set(prices)];
    console.log('üîç –¶–µ–Ω—ã:', prices);
    if (unique.length > 3) {
      console.warn('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω');
    }
    const box = await inventoryPage.getFirstItemBox();
    if (!box || box.height < 100) {
      console.warn('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –±–∞–≥');
    }
    await page.screenshot({ path: 'screenshots/visual_user.png', fullPage: true });
  });
});

test.describe('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π', () => {
  let loginPage: LoginPage;

  test.beforeEach(async ({ page }) => {
    loginPage = new LoginPage(page);
    await loginPage.goto();
  });

  test('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å –ª–æ–≥–∏–Ω–æ–º locked_out_user', async ({ page }) => {
    await loginPage.login('locked_out_user', 'secret_sauce');
    const error = page.locator('[data-test="error"]');
    await expect(error).toBeVisible();
    await expect(error).toContainText('Epic sadface: Sorry, this user has been locked out.');
  });
});
